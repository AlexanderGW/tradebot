import { Bot, Log } from '../Bot';
import { ChartCandleData, ChartItem } from '../Chart';
import {
	ExchangeApiData,
	ExchangeApiTickerData,
	ExchangeTickerApiInterface,
	ExchangeTickerData
} from '../Exchange';
import { PairData } from '../Pair';
import { Web3 } from '../../Helper/Web3';

import axios from 'axios';

export const ACCEPT_VERSION = '20230302';

export type GeckoTerminalV2ExchangeResponseData = {
	id: string,
	type: string,
	attributes: {
		[index: string]: any,
		ohlcv_list?: any, // TODO: type
	},
};

export type GeckoTerminalV2ExchangeResponseError = {
	status: string,
	title: string,
};

export type GeckoTerminalV2ExchangeResponse = {
	data: GeckoTerminalV2ExchangeResponseData,
	errors?: GeckoTerminalV2ExchangeResponseError[],
	meta?: any, // TODO: type
};

export type GeckoTerminalV2ExchangeInterface =
	& ExchangeTickerApiInterface
	& {
		api: (
			path: string,
		) => Promise<GeckoTerminalV2ExchangeResponse>,
	}

export class GeckoTerminalV2Exchange extends Web3 implements GeckoTerminalV2ExchangeInterface {
	constructor (
		_: ExchangeApiData,
	) {
		super(_);
	}

	handleError (
		_: GeckoTerminalV2ExchangeResponse
	) {
		if (_.errors) {
			for (let i = 0; i < _.errors.length; i++) {
				Bot.log(_.errors[i], Log.Err);
			}

			const lastError = _.errors?.pop();
			throw new Error(lastError?.title ?? lastError?.status);
		}
	}

	async api(
		path: string,
	): Promise<GeckoTerminalV2ExchangeResponse> {
		const endpointUrl = `https://api.geckoterminal.com/api/v2${path}`;
		Bot.log(`GeckoTerminalV2.endpointUrl: ${endpointUrl}`, Log.Verbose);

		const response = await axios.get(
			endpointUrl,
			{
				headers: {
					'Accept': `application/json;version=${ACCEPT_VERSION}`,
				}
			}
		);

		if (response.status !== 200)
			throw new Error(response.statusText);

		return response.data as GeckoTerminalV2ExchangeResponse;
	}

	async getTicker (
		_: PairData,
	): Promise<ExchangeApiTickerData> {
		// TODO: fix
		// if (_.exchange.uuid !== this.uuid)
		// 	throw new Error(`Exchange '${this.name}'; api.Pair '${_.name}'; api.Incompatible exchange pair`);
		
		const pairLocal = `${_.a.name}-${_.b.name}`;
		const pairForeign = `${_.a.symbol}-${_.b.symbol}`;

		Bot.log(`Exchange '${this.name}'; api.getTicker; Pair: '${pairLocal}'; Foreign: '${pairForeign}'`, Log.Verbose);

		const network = 'eth';
		const addresses = `${_.a.symbol},${_.b.symbol}`;

		// Get ticker for pool
		// let responseJson = await this.api(
		// 	`/simple/networks/${network}/token_price/${addresses}`,
		// );
		// TODO: TEMP
		let responseJson = JSON.parse(`{"data":{"id":"4a1a098b-e070-4302-951b-a95d2ff07a44","type":"simple_token_price","attributes":{"token_prices":{"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48":"1.0012202295766","0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2":"2335.09078088167"}}}}`);

		// Log raw response
		Bot.log(`Exchange '${this.name}'; api.getTicker; Response: '${JSON.stringify(responseJson)}'`, Log.Verbose);

		if (!responseJson)
			throw new Error(`Invalid 'Ticker' response`);

		// Handle any ticker errors
		this.handleError(responseJson);

		let returnData: ExchangeApiTickerData = {};
		returnData.ticker = [];
		returnData.tickerIndex = [];

		// Walk all balances
		for (let resultToken in responseJson.data.attributes.token_prices) {
			// Bot.log(`resultToken: ${resultToken}`, Log.Verbose);
			// Bot.log(`price: ${Number(responseJson.data.attributes.token_prices[resultToken])}`, Log.Verbose);
			// Get asset pair information on exchange
			// TODO: possible caching?

			const thisToken = await this.getErc20(resultToken);

			const tickerData: ExchangeTickerData = {
				decimals: thisToken?.decimals,
				price: Number(responseJson.data.attributes.token_prices[resultToken]),
			};

			const index = returnData.tickerIndex.indexOf(resultToken);
			if (index < 0) {
				returnData.ticker.push(tickerData);
				returnData.tickerIndex.push(resultToken);
			} else
				returnData.ticker[index] = tickerData;
		}

		// Add pair A symbol (token address) as pair ticker
		const tokenAPos = returnData.tickerIndex.indexOf(_.a.symbol);
		if (tokenAPos < 0)
			throw new Error(`Pair A symbol, not found in response.`);

		const tickerData: ExchangeTickerData = {
			decimals: returnData.ticker[tokenAPos].decimals,
			price: Number(returnData.ticker[tokenAPos].price),
		};

		returnData.ticker.push(tickerData);
		returnData.tickerIndex.push(pairForeign);

		return returnData;
	}

	async syncChart (
		chart: ChartItem,
	): Promise<ChartCandleData> {
		let nextDate = new Date(chart.datasetNextTime);
		Bot.log(`Chart '${chart.name}'; api.syncChart; From: ${nextDate.toISOString()}`);

		const aggregateOptions = [
			60000,
			300000,
			900000,
			3600000,
			14400000,
			43200000,
			86400000
		];

		const pos = aggregateOptions.indexOf(chart.candleTime);
		if (pos < 0)
			throw new Error(`Unsupported candle size`);

		const [tokenA, tokenB] = await this.getErc20FromPair(chart.pair);

		const network = 'eth';

		const poolAddress = this.getPoolAddress(
			tokenA,
			tokenB
		);

		const pool = await this.getPool(
			poolAddress,
			tokenA,
			tokenB
		);
		Bot.log(`Pool.TokenA`, Log.Warn);
		Bot.log(pool.token0.address, Log.Warn);
		Bot.log(`Pool.TokenB`, Log.Verbose);
		Bot.log(pool.token1.address, Log.Warn);

		const token = pool.token0.address === tokenA.address ? 'base' : 'quote';
		Bot.log(`token ${token}`, Log.Warn);

		const timeframe = pos < 3 ? 'minute' : pos < 6 ? 'hour' : 'day';
		const aggregate = chart.candleTime / (pos < 3 ? 60000 : pos < 6 ? 3600000 : 86400000);

		// TODO: token = base / quote - indent pair A in tokens, and use that
		
		// let responseJson = await this.api(
		// 	`/networks/${network}/pools/${poolAddress}/ohlcv/${timeframe}` +
		// 	`?aggregate=${aggregate}` +
		// 	`&before_timestamp=${Math.floor(chart.datasetNextTime / 1000)}` +
		// 	`&limit=100` +
		// 	`&currency=usd` +
		// 	`&token=${token}`
		// );
		let responseJson = JSON.parse(`{"data":{"id":"776c2c31-68f4-401b-a0e3-fd970b164e61","type":"ohlcv_request_response","attributes":{"ohlcv_list":[[1725220800,2504.26519383895,2505.0330199253,2411.0647866093,2411.0647866093,21990.659495410164],[1725206400,2453.98966427175,2504.26519383895,2453.98966427175,2504.26519383895,4184.873066511365],[1725192000,2468.69726586419,2468.69726586419,2453.98966427175,2453.98966427175,3874.379069327613],[1725163200,2485.25886069428,2485.37848647731,2468.69726586419,2468.69726586419,2597.9034485651923],[1725148800,2530.56600260793,2530.56600260793,2485.25886069428,2485.25886069428,1302.147289518992],[1725033600,2444.01166584589,2530.56600260793,2444.01166584589,2530.56600260793,9433.272641504445],[1725019200,2518.42257381753,2518.42257381753,2444.01166584589,2444.01166584589,9977.698903088492],[1725004800,2513.87590437782,2518.42257381753,2513.87590437782,2518.42257381753,425.614439504138],[1724976000,2519.79675898785,2519.79675898785,2513.87590437782,2513.87590437782,474.840836594248],[1724961600,2529.67540526079,2529.67540526079,2519.79675898785,2519.79675898785,1053.68100796983],[1724947200,2587.4140843301,2587.4140843301,2529.67540526079,2529.67540526079,4417.726120857524],[1724932800,2564.71332379093,2587.4140843301,2564.71332379093,2587.4140843301,3337.309251356537],[1724918400,2551.22471796214,2564.71332379093,2551.22471796214,2564.71332379093,2100.507478175518],[1724904000,2544.98259611124,2551.22471796214,2544.98259611124,2551.22471796214,997.933093620612],[1724875200,2531.88799689529,2544.98259611124,2531.88799689529,2544.98259611124,2184.974055408402],[1724860800,2477.66590640589,2531.88799689529,2463.94848341981,2531.88799689529,5282.871465211315],[1724846400,2539.27202439701,2539.27202439701,2477.66590640589,2477.66590640589,4354.18471819807],[1724832000,2481.0343253039,2539.27202439701,2477.4447710333,2539.27202439701,9547.961018257996],[1724817600,2470.08174014863,2481.0343253039,2470.08174014863,2481.0343253039,576.0795851637756],[1724803200,2461.82032817657,2470.08174014863,2461.82032817657,2470.08174014863,1659.718242906621],[1724788800,2595.829414162,2595.829414162,2410.22115571565,2461.82032817657,28542.893833565893],[1724760000,2631.78134797498,2631.78134797498,2565.5262062484,2595.829414162,8194.86737415139],[1724745600,2678.24333107922,2678.24333107922,2631.78134797498,2631.78134797498,6265.082811596347],[1724702400,2688.13591059967,2688.13591059967,2678.24333107922,2678.24333107922,1976.536116602657],[1724688000,2716.2032600094,2716.2032600094,2688.13591059967,2688.13591059967,3646.283372305434],[1724673600,2719.13312320331,2719.13312320331,2716.2032600094,2716.2032600094,979.872446566655],[1724659200,2742.90398372253,2742.90398372253,2719.13312320331,2719.13312320331,1350.45229194736],[1724630400,2787.5330138525,2787.5330138525,2742.90398372253,2742.90398372253,1535.48652071104],[1724616000,2742.69895572407,2787.5330138525,2742.69895572407,2787.5330138525,537.6665606643907],[1724558400,2746.13297313054,2746.13297313054,2742.69895572407,2742.69895572407,194.383343195444],[1724529600,2809.25919619695,2809.25919619695,2746.13297313054,2746.13297313054,4042.28886825735],[1724515200,2777.58687215417,2809.25919619695,2777.58687215417,2809.25919619695,3683.017613821818],[1724443200,2731.07413244866,2777.58687215417,2731.07413244866,2777.58687215417,5299.559155171592],[1724428800,2643.93770135779,2731.07413244866,2643.93770135779,2731.07413244866,7660.62595143808],[1724414400,2675.61213277142,2689.8108807472,2643.93770135779,2643.93770135779,2329.1457706994424],[1724385600,2644.68373692307,2678.41261913312,2644.68373692307,2675.61213277142,3974.4742609008167],[1724371200,2636.67143469154,2644.68373692307,2636.67143469154,2644.68373692307,1832.302029782373],[1724313600,2597.31179342949,2636.67143469154,2597.31179342949,2636.67143469154,3683.530716505945],[1724284800,2650.72248130741,2650.72248130741,2597.31179342949,2597.31179342949,3053.98786617511],[1724270400,2637.44945110846,2650.72248130741,2637.44945110846,2650.72248130741,1058.52221127926],[1724256000,2605.48271845292,2637.44945110846,2605.48271845292,2637.44945110846,4928.919659446643],[1724241600,2572.0267227851,2605.51015151075,2553.59758333963,2605.48271845292,6262.6096199919475],[1724198400,2585.02038834032,2585.02038834032,2572.0267227851,2572.0267227851,1005.72698776963],[1724184000,2590.96716426411,2590.96716426411,2585.02038834032,2585.02038834032,8.091419360615543],[1724169600,2564.80831858422,2590.96716426411,2564.80831858422,2590.96716426411,8.56981625816256],[1724155200,2680.66952025399,2680.66952025399,2564.80831858422,2564.80831858422,10994.341572589845],[1724126400,2660.30789988575,2680.66952025399,2660.30789988575,2680.66952025399,3178.5909916615387],[1724112000,2631.19980177738,2662.16394794059,2631.19980177738,2660.30789988575,4237.2799721462925],[1724097600,2620.14511545118,2631.19980177738,2620.14511545118,2631.19980177738,2013.866091478714],[1724083200,2577.36632000263,2620.14511545118,2577.36632000263,2620.14511545118,918.862090538863],[1724054400,2618.64932058809,2618.64932058809,2577.36632000263,2577.36632000263,5764.65397929341],[1724011200,2665.95498145046,2665.95498145046,2618.64932058809,2618.64932058809,2297.369008329552],[1723982400,2655.73041858826,2665.95498145046,2655.73041858826,2665.95498145046,2453.118777987061],[1723968000,2625.63298983367,2655.73041858826,2625.63298983367,2655.73041858826,3762.461835894683],[1723939200,2622.01623137239,2625.63298983367,2622.01623137239,2625.63298983367,695.295613840694],[1723824000,2567.93157590098,2622.01623137239,2567.93157590098,2622.01623137239,2602.754942957565],[1723809600,2457.17873508185,2575.81246794659,2457.17873508185,2567.93157590098,2279.25892366188],[1723075200,2357.63990762856,2457.17873508185,2357.63990762856,2457.17873508185,24496.4434278083],[1723060800,2341.07770456487,2357.63990762856,2318.9394438442,2357.63990762856,10414.6983526223],[1723046400,2393.62741779658,2393.62741779658,2341.07770456487,2341.07770456487,10288.4628341126],[1723032000,2479.66203944072,2479.66203944072,2385.75216703735,2393.62741779658,24551.2732168189],[1723017600,2522.82931228607,2536.86877545734,2479.66203944072,2479.66203944072,9812.68179582211],[1722988800,2454.49867205206,2522.82931228607,2435.17949608374,2522.82931228607,17247.511432875],[1722974400,2492.83543545759,2492.83543545759,2454.49867205206,2454.49867205206,10146.0485197816],[1722960000,2534.31793980422,2534.31793980422,2492.83543545759,2492.83543545759,3742.12107094255],[1722945600,2453.41147988738,2534.31793980422,2429.24408596349,2534.31793980422,32453.6768090248],[1722931200,2526.72801982092,2526.72801982092,2453.41147988738,2453.41147988738,20317.3098238576],[1722916800,2492.22558900159,2526.72801982092,2487.62552349023,2526.72801982092,4215.59121453624],[1722902400,2420.76461492614,2543.34931049912,2420.76461492614,2492.22558900159,50728.435024285],[1722888000,2402.51191482584,2462.08024423624,2402.51191482584,2420.76461492614,14406.0621406326],[1722873600,2448.77658116739,2484.8284208619,2368.7776115755,2402.51191482584,24081.3230998488],[1722859200,2290.97610044521,2448.77658116739,2195.86212628309,2448.77658116739,59218.4414800019],[1722844800,2366.65452237095,2366.65452237095,2229.7719435919,2290.97610044521,21163.7845788593],[1722830400,2322.03024402064,2379.26768387529,2167.10902597339,2366.65452237095,160913.199409283],[1722816000,2681.83737209588,2681.83737209588,2133.21906099503,2322.03024402064,835518.955086457],[1722801600,2758.22385178383,2761.6548238917,2681.83737209588,2681.83737209588,14309.3205319625],[1722787200,2827.7777887629,2827.7777887629,2659.47414553153,2758.22385178383,88335.5306404076],[1722772800,2923.64750309156,2923.64750309156,2827.7777887629,2827.7777887629,26873.2507649803],[1722729600,2878.63092267373,2923.64750309156,2878.63092267373,2923.64750309156,9153.06106611295],[1722715200,2880.94054476533,2883.54124973426,2878.63092267373,2878.63092267373,5482.39729090983],[1722700800,2948.72582478067,2948.72582478067,2880.93894221447,2880.94054476533,27410.8031668356],[1722686400,2990.67397507253,3005.92807692377,2948.72582478067,2948.72582478067,17664.6522727884],[1722672000,2989.47318187695,2990.67397507253,2989.47318187695,2990.67397507253,1690.92403676512],[1722657600,2972.65873123822,2989.47318187695,2972.65873123822,2989.47318187695,7882.85636149708],[1722643200,2978.48940119259,2978.48940119259,2919.64297137135,2972.65873123822,40127.3611289],[1722628800,3031.13931388242,3031.13931388242,2978.48940119259,2978.48940119259,5191.47553672643],[1722614400,2995.91356907594,3031.13931388242,2995.91356907594,3031.13931388242,6418.87097757671],[1722600000,3140.97659184455,3140.97659184455,2987.19067647752,2995.91356907594,60038.0613578199],[1722571200,3148.53559425066,3148.53559425066,3140.97659184455,3140.97659184455,6447.2800493274],[1722556800,3204.55722226087,3206.52801996317,3148.53559425066,3148.53559425066,8964.41728020224],[1722542400,3098.07755013003,3204.55722226087,3098.07755013003,3204.55722226087,31962.9996174647],[1722528000,3114.38745811647,3114.38745811647,3085.87504372718,3098.07755013003,16019.7997861494],[1722513600,3183.00983682068,3185.87571274408,3114.38745811647,3114.38745811647,19630.8374522907],[1722499200,3148.95603497244,3183.00983682068,3148.95603497244,3183.00983682068,994.620427647877],[1722484800,3183.94469347309,3183.94469347309,3148.95603497244,3148.95603497244,12449.9553995968],[1722470400,3224.94380107506,3224.94380107506,3183.94469347309,3183.94469347309,21516.6445737252],[1722456000,3257.59638987048,3257.59638987048,3224.94380107506,3224.94380107506,17603.9730333183],[1722441600,3333.76361544588,3333.76361544588,3257.59638987048,3257.59638987048,19026.544751635],[1722427200,3321.39589515911,3333.76361544588,3321.39589515911,3333.76361544588,9058.18961561629],[1722398400,3272.33948967894,3321.39589515911,3272.33948967894,3321.39589515911,13313.9956016442]]}},"meta":{"base":{"address":"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","name":"Wrapped Ether","symbol":"WETH","coingecko_coin_id":"weth"},"quote":{"address":"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48","name":"USD Coin","symbol":"USDC","coingecko_coin_id":"usd-coin"}}}`);

		// Log raw response
		Bot.log(`Exchange '${this.name}'; api.syncChart; Response: '${JSON.stringify(responseJson)}'`, Log.Verbose);

		let etlData: ChartCandleData = {
			close: [],
			high: [],
			low: [],
			open: [],
			openTime: [],
			tradeCount: [],
			volume: [],
			vwap: [],
		};

		// Extract, transform, load response to chart
		let pairData = responseJson?.data?.attributes?.ohlcv_list;
		if (!pairData)
			throw new Error(`Invalid response from GeckoTerminalV2`);

		let p: {
			0: number,
			1: string,
			2: string,
			3: string,
			4: string,
			5: string,
		};

		for (let i = 0; i < pairData.length; i++) {
			p = pairData[i];
			// Bot.log(p[0]);return;
			etlData.openTime?.push(p[0]);
			etlData.open?.push(p[1]);
			etlData.high?.push(p[2]);
			etlData.low?.push(p[3]);
			etlData.close?.push(p[4]);
			etlData.volume?.push(p[5]);
		}

		return etlData;
	}
}
